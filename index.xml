<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>11 DigiTech on TMC - 11 Digital Tech</title><link>https://tmcdigitech.github.io/dit11/</link><description>Recent content in 11 DigiTech on TMC - 11 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit11/index.xml" rel="self" type="application/rss+xml"/><item><title>Buttons and Labels</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/events/</guid><description>Creating a .kv File Separated our logic from our styling and elements There are a few conventions we need to follow when creating a .kv file.
Naming: The name of your .kv file must follow the rules below in order for python/kivy to be able to see and load the file.
It must be all lowercase It must match with the name of your main class. (The one that has the build method) If the name of your main class ends in &amp;ldquo;app&amp;rdquo; (lowercase or uppercase) you must not include &amp;ldquo;app&amp;rdquo; in your file name.</description></item><item><title>Classes and Methods</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</guid><description>Object Oriented Programming (OOP) OOP has self-contained objects containing both the programming routine/procedures and the data being processed. These objects interact by sending data to one another.
In OOP, you write classes that represent real world things and create objects based on these classes. Classes attributes as well as procedures (often known as methods).
Class The class is the blueprint, or template, that defines what an object is. This includes the type of data an object can hold, its initial value and how the object behaves.</description></item><item><title>Float Layout</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/floatlayout/</guid><description>A FloatLayout with a Button What we are going to do now is write code that uses a FloatLayout with a text input and a custom button in it. To demonstrate how the properties used for sizing and positioning work, though, let’s use just the button first.
The size_hint and pos_hint Properties This time we’re going to use the size_hint property instead of size to set the widget size.</description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/python/</guid><description>If you are new to Python, here is an good interactive guide you can get started with:
Aposteriori: Introduction to Python</description></item><item><title>ScreenManager</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/screenmanager/</guid><description> Using more than one screen Watch the following video to learn how you can use more than one screen in your app.
Include the following 1 2 from kivy.lang import Builder from kivy.uix.screenmanager import ScreenManager How it fits together</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/software/</guid><description>To start using Kivy to develop apps, you will need to:
Open the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Find and install Python (3.9):
Open Visual Studio Code and install the Python Extension</description></item><item><title>What is an API</title><link>https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/api/whatisapi/</guid><description>There are millions of APIs online which provide access to data. Websites like Reddit, Twitter, and Facebook all offer certain data through their APIs.
To use an API, you make a request to a remote web server, and retrieve the data you need.
But why use an API instead of a static CSV dataset you can download from the web? APIs are useful in the following cases:
The data is changing quickly.</description></item><item><title>1. Hello World</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/helloworld/</guid><description>Taken from prosperocoder.com
Hello World – A Basic Kivy App Well, we’re going to write a basic Kivy app that will display the Hello World text. In Kivy, like in many other GUI libraries and frameworks, static text is usually displayed in a label. In Kivy we call simple GUI elements like labels, buttons, sliders, check boxes, etc. widgets, although widgets don’t have to be simple at all and you can create your own widgets, which we are going to do later.</description></item><item><title>2. Kv Files</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/kvfiles/</guid><description>Taken from prosperocoder.com
Our program contains just one widget, the label. This is all as far as presentation is concerned. We’ll move that part to a new file and leave the rest in the main.py file. So, after we remove the presentation part from the main.py, as well as the comments to make the file clear and transparent, this is what we’ll have:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # We&amp;#39;re using Kivy, so we&amp;#39;ll need the kivy module import kivy # We need the App class.</description></item><item><title>3. Label Properties</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/labels/</guid><description>Taken from prosperocoder.com
Here’s the code again.
The Python file:
1 2 3 4 5 6 7 8 9 10 11 12 File name: main.py import kivy from kivy.app import App from kivy.uix.button import Label class HelloWorldApp(App): def build(self): return Label() if __name__ == &amp;#39;__main__&amp;#39;: HelloWorldApp().run() and the kv file: 1 2 3 4 # File name: helloworld.kv &amp;lt;Label&amp;gt;: text: &amp;#39;Hello World!&amp;#39; This program displays a label. The label has a text property.</description></item><item><title>4. Buttons</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/buttons/</guid><description>Taken from prosperocoder.com
A Button Widget is Basically a Label… In Kivy the Button class inherits from Label, so they have the same properties in common, plus the button has some extra functionality. In particular they share the text property. Let’s modify our main.py and helloworld.kv files so that our program displays a button widget instead of a label. First, let the changes be as few as possible. Here’s the main.</description></item><item><title>Page Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/pagelayouts/</guid><description>The PageLayout works in a different manner from other layouts. It is a dynamic layout, in the sense that it allows flipping through pages using its borders. The idea is that its components are stacked in front of each other, and we can just see the one that is on top. PageLayout is similar to pages of a copy like that we can move/change the pages right or left.
The PageLayout class is used to create a simple multi-page layout, in a way that allows easy flipping from one page to another using border.</description></item><item><title>Parse JSON</title><link>https://tmcdigitech.github.io/dit11/appdev/api/parsejson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/api/parsejson/</guid><description>What is Parsing Parsing is breaking a block of data into smaller pieces (tokens) by following a set of rules (using delimiters for example), so that this data could be processes piece by piece (managed, analysed, interpreted, transmitted, ets).
How do we parse JSON in Python. First we load a JSON file using json.load() method. The result is a Python dictionary. We can then access the fields using dictionary methods.</description></item><item><title>More Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/morelayouts/</guid><description>Relative Layout RelativeLayout works pretty much like FloatLayout and the difference will be clear only later when we embed it in another layout. Here’s a simple example with a RelativeLayout and just one button in it. The button should be positioned at the fixed coordinates 0, 0 and occupy about a third of the available space in both horizontal and vertical direction.
Here’s the Python code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import kivy from kivy.</description></item><item><title>Activity 1</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</guid><description>Setting up The Python Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import kivy from kivy.app import App from kivy.uix.label import Label from kivy.uix.gridlayout import GridLayout from kivy.uix.textinput import TextInput from kivy.uix.button import Button from kivy.uix.widget import Widget from kivy.properties import ObjectProperty class MyGrid(Widget): pass class MyApp(App): def build(self): return MyGrid() if __name__ == &amp;#34;__main__&amp;#34;: MyApp().</description></item><item><title>Activity 2</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</guid><description>Create a simple calculator Setting up The Python Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import kivy from kivy.app import App from kivy.uix.widget import Widget from kivy.properties import ObjectProperty class MyGrid(Widget): pass class MyApp(App): def build(self): return MyGrid() if __name__ == &amp;#34;__main__&amp;#34;: MyApp().run() Creating a .kv File Separated our logic from our styling and elements There are a few conventions we need to follow when creating a .</description></item><item><title>Activity 3</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</guid><description>Create a Password Generator Learning how to create a password generator can be the perfect project to learn or review basic Python and Kivy concepts.
To create a password generator in Python you can use a for loop that randomly selects alphanumeric characters, digits and punctuation characters to generate the password string. You can set the password length that defines the number of loop iterations. Also, using a nested for loop you can improve the password generator to generate multiple passwords.</description></item><item><title>Embedding Layouts</title><link>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/layouts/embedlayouts/</guid><description>FloatLayouts and RelativeLayouts inside GridLayout As mentioned in the previous part, the FloatLayout and the RelativeLayout are pretty similar. The difference is that with the FloatLayout the coordinates are not relative to the position of the layout, whereas with RelativeLayout they are. Here’s a simple demonstration. We’ll use a GridLayout and embed four other layouts in it, two FloatLayouts and two RelativeLayouts. Here’s the Python code:
1 2 3 4 5 6 7 8 9 10 11 12 import kivy from kivy.</description></item><item><title>More Widgets</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</guid><description>Taken from prosperocoder.com
The Check Box Kivy Widget Let’s start with the check box Kivy widget. The check box is a two-state button that can be either checked or unchecked. Later we’ll see that it can be used as a radio button as well, if it’s in a group, but for now let’s just have a look at a single check box.
The main property of a check box is active, which is True if it’s checked and False otherwise.</description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/flowcharts/</guid><description>Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.
Start and End symbols are represented as rounded rectangles, usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.</description></item><item><title>Programming Constructs</title><link>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/gettingStarted/constructs/</guid><description>Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.
There are three basic building blocks to consider:
sequence is the order in which instructions occur and are processed selection determines which path a program takes when it is running iteration is the repeated execution of a section of code when a program is running Sequence Sequence is the order in which programming statements are executed.</description></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit11/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>co-ordinate system</title><link>https://tmcdigitech.github.io/dit11/glossary/coordinate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/coordinate/</guid><description>In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.
Everything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit11/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:
(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.</description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit11/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/teaching/siteUrl/</guid><description>Learn about Pygame Zero here:
https://tmcdigitech.github.io/dit8/</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit11/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).</description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>