<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Basics on TMC - 11 Digital Tech</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/</link><description>Recent content in The Basics on TMC - 11 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit11/appdev/basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Buttons and Labels</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/events/</guid><description>Creating a .kv File Separated our logic from our styling and elements There are a few conventions we need to follow when creating a .kv file.
Naming: The name of your .kv file must follow the rules below in order for python/kivy to be able to see and load the file.
It must be all lowercase It must match with the name of your main class. (The one that has the build method) If the name of your main class ends in &amp;ldquo;app&amp;rdquo; (lowercase or uppercase) you must not include &amp;ldquo;app&amp;rdquo; in your file name.</description></item><item><title>Classes and Methods</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/classesandmethods/</guid><description>Object Oriented Programming (OOP) OOP has self-contained objects containing both the programming routine/procedures and the data being processed. These objects interact by sending data to one another.
In OOP, you write classes that represent real world things and create objects based on these classes. Classes attributes as well as procedures (often known as methods).
Class The class is the blueprint, or template, that defines what an object is. This includes the type of data an object can hold, its initial value and how the object behaves.</description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/python/</guid><description>If you are new to Python, here is an good interactive guide you can get started with:
Aposteriori: Introduction to Python</description></item><item><title>Activity 1</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity1/</guid><description>Setting up The Python Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import kivy from kivy.app import App from kivy.uix.label import Label from kivy.uix.gridlayout import GridLayout from kivy.uix.textinput import TextInput from kivy.uix.button import Button from kivy.uix.widget import Widget from kivy.properties import ObjectProperty class MyGrid(Widget): pass class MyApp(App): def build(self): return MyGrid() if __name__ == &amp;#34;__main__&amp;#34;: MyApp().</description></item><item><title>Activity 2</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity2/</guid><description>Create a simple calculator Setting up The Python Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import kivy from kivy.app import App from kivy.uix.widget import Widget from kivy.properties import ObjectProperty class MyGrid(Widget): pass class MyApp(App): def build(self): return MyGrid() if __name__ == &amp;#34;__main__&amp;#34;: MyApp().run() Creating a .kv File Separated our logic from our styling and elements There are a few conventions we need to follow when creating a .</description></item><item><title>Activity 3</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/activity3/</guid><description>Create a Password Generator Learning how to create a password generator can be the perfect project to learn or review basic Python and Kivy concepts.
To create a password generator in Python you can use a for loop that randomly selects alphanumeric characters, digits and punctuation characters to generate the password string. You can set the password length that defines the number of loop iterations. Also, using a nested for loop you can improve the password generator to generate multiple passwords.</description></item><item><title>More Widgets</title><link>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit11/appdev/basics/widgets/</guid><description>Taken from prosperocoder.com
The Check Box Kivy Widget Let’s start with the check box Kivy widget. The check box is a two-state button that can be either checked or unchecked. Later we’ll see that it can be used as a radio button as well, if it’s in a group, but for now let’s just have a look at a single check box.
The main property of a check box is active, which is True if it’s checked and False otherwise.</description></item></channel></rss>