[{"id":0,"href":"/dit11/gamedev/","title":"Game Development","parent":"11 DigiTech","content":""},{"id":1,"href":"/dit11/gamedev/coding/vars/","title":"Variables, Types \u0026 Operators","parent":"Coding in C#","content":" Variables Types Operators Variable Scope Constants and Enumerations "},{"id":2,"href":"/dit11/gamedev/coding/selection/","title":"Selection IF","parent":"Coding in C#","content":" Selection or Conditionals Switch Statements Ternary Operator "},{"id":3,"href":"/dit11/gamedev/coding/Arrays/","title":"Arrays","parent":"Coding in C#","content":" Arrays "},{"id":4,"href":"/dit11/gamedev/coding/loops/","title":"Iteration or Loops","parent":"Coding in C#","content":" For Loops - fixed number of loops Foreach Loop Do While Loops Review "},{"id":5,"href":"/dit11/gamedev/coding/","title":"Coding in C#","parent":"Game Development","content":""},{"id":6,"href":"/dit11/gamedev/coding/advcoding/","title":"More Coding","parent":"Coding in C#","content":" Structs Access Control and Namespaces Methods Properties Constructors Section Overview Classes Inheritance "},{"id":7,"href":"/dit11/gamedev/unity/fpmove/","title":"Movement","parent":"Unity","content":" First Person Movement PlayerCam 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 using System.Collections; using System.Collections.Generic; using UnityEngine; public class PlayerCam : MonoBehaviour { public float sensX; public float sensY; public Transform orientation; //public Transform camHolder; float xRotation; float yRotation; private void Start() { // Lock the cursor in the centre and hide Cursor.lockState = CursorLockMode.Locked; Cursor.visible = false; } private void Update() { // get mouse input float mouseX = Input.GetAxisRaw(\u0026#34;Mouse X\u0026#34;) * Time.deltaTime * sensX; float mouseY = Input.GetAxisRaw(\u0026#34;Mouse Y\u0026#34;) * Time.deltaTime * sensY; yRotation += mouseX; xRotation -= mouseY; xRotation = Mathf.Clamp(xRotation, -90f, 90f); //stop looking to far // rotate cam and orientation transform.rotation = Quaternion.Euler(xRotation, yRotation, 0); orientation.rotation = Quaternion.Euler(0, yRotation, 0); } } MoveCamera 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 using System.Collections; using System.Collections.Generic; using UnityEngine; public class MoveCamera : MonoBehaviour { public Transform cameraPosition; // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { transform.position = cameraPosition.position; } } PlayerMovement 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 using System.Collections; using System.Collections.Generic; using UnityEngine; public class PlayerMovement : MonoBehaviour { [Header(\u0026#34;Movement\u0026#34;)] public float moveSpeed; public float groundDrag; public float jumpForce; public float jumpCooldown; public float airMultiplier; bool readyToJump; //[HideInInspector] public float walkSpeed; //[HideInInspector] public float sprintSpeed; [Header(\u0026#34;Keybinds\u0026#34;)] public KeyCode jumpKey = KeyCode.Space; [Header(\u0026#34;Ground Check\u0026#34;)] public float playerHeight; public LayerMask whatIsGround; bool grounded; public Transform orientation; float horizontalInput; float verticalInput; Vector3 moveDirection; Rigidbody rb; private void Start() { rb = GetComponent\u0026lt;Rigidbody\u0026gt;(); rb.freezeRotation = true; readyToJump = true; } private void Update() { // ground check grounded = Physics.Raycast(transform.position, Vector3.down, playerHeight * 0.5f + 0.3f, whatIsGround); MyInput(); SpeedControl(); // handle drag if (grounded) rb.drag = groundDrag; else rb.drag = 0; } private void FixedUpdate() { MovePlayer(); } private void MyInput() { horizontalInput = Input.GetAxisRaw(\u0026#34;Horizontal\u0026#34;); verticalInput = Input.GetAxisRaw(\u0026#34;Vertical\u0026#34;); // when to jump if (Input.GetKey(jumpKey) \u0026amp;\u0026amp; readyToJump \u0026amp;\u0026amp; grounded) { readyToJump = false; Jump(); Invoke(nameof(ResetJump), jumpCooldown); } } private void MovePlayer() { // calculate movement direction moveDirection = orientation.forward * verticalInput + orientation.right * horizontalInput; rb.AddForce(moveDirection.normalized * moveSpeed * 10f, ForceMode.Force); // on ground if (grounded) rb.AddForce(moveDirection.normalized * moveSpeed * 10f, ForceMode.Force); // in air else if (!grounded) rb.AddForce(moveDirection.normalized * moveSpeed * 10f * airMultiplier, ForceMode.Force); } private void SpeedControl() { Vector3 flatVel = new Vector3(rb.velocity.x, 0f, rb.velocity.z); // limit velocity if needed if (flatVel.magnitude \u0026gt; moveSpeed) { Vector3 limitedVel = flatVel.normalized * moveSpeed; rb.velocity = new Vector3(limitedVel.x, rb.velocity.y, limitedVel.z); } } private void Jump() { // reset y velocity rb.velocity = new Vector3(rb.velocity.x, 0f, rb.velocity.z); rb.AddForce(transform.up * jumpForce, ForceMode.Impulse); } private void ResetJump() { readyToJump = true; } } "},{"id":8,"href":"/dit11/gamedev/unity/","title":"Unity","parent":"Game Development","content":""},{"id":9,"href":"/dit11/gamedev/unity/environment/","title":"Environment","parent":"Unity","content":" Using the Terrain Tools in Unity https://www.raywenderlich.com/21911888-using-the-terrain-tools-in-unity\nAssets Kenny https://kenney.nl/assets?q=3d\n"},{"id":10,"href":"/dit11/gamedev/unity/shooting/","title":"Shooting","parent":"Unity","content":" Shooting - Basic Gun Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Gun : MonoBehaviour { public GameObject bulletPrefab; public Transform launchPosition; // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { if (Input.GetMouseButtonDown(0)) { if (!IsInvoking(\u0026#34;fireBullet\u0026#34;)) { InvokeRepeating(\u0026#34;fireBullet\u0026#34;, 0f, 0.1f); } } if (Input.GetMouseButtonUp(0)) { CancelInvoke(\u0026#34;fireBullet\u0026#34;); } } void fireBullet() { // 1 GameObject bullet = Instantiate(bulletPrefab) as GameObject; // 2 bullet.transform.position = launchPosition.position; // 3 bullet.GetComponent\u0026lt;Rigidbody\u0026gt;().velocity = transform.parent.forward * 100; } } Projectile/bullet Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 using System.Collections; using System.Collections.Generic; using UnityEngine; public class SelfDestruct : MonoBehaviour { public float timer = 1f; void Update() { // Using a timer //timer -= Time.deltaTime; //if (timer \u0026lt;= 0) //{ //\tDestroy(gameObject); //} } // Destroy when nolonger visible private void OnBecameInvisible() { Destroy(gameObject); } // Destroy on collision private void OnCollisionEnter(Collision collision) { Destroy(gameObject); } } Shooting - Advanced "},{"id":11,"href":"/dit11/gamedev/unity/enemy/","title":"Enemy AI","parent":"Unity","content":" Enemy AI "},{"id":12,"href":"/dit11/gamedev/unity/pickup/","title":"Pick ups","parent":"Unity","content":" Pick Ups "},{"id":13,"href":"/dit11/glossary/","title":"Glossary","parent":"11 DigiTech","content":""},{"id":14,"href":"/dit11/troubleshooting/","title":"Troubleshooting","parent":"11 DigiTech","content":""},{"id":15,"href":"/dit11/reference/","title":"Reference materials","parent":"11 DigiTech","content":" Robotics LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial Game Design Pygame Zero documentation Physics for Game Developers Teaching a kid to code with Pygame Zero "},{"id":16,"href":"/dit11/teaching/","title":"Teaching materials","parent":"11 DigiTech","content":""},{"id":17,"href":"/dit11/","title":"11 DigiTech","parent":"","content":"Welcome to Year 11 Digital Technologies Semester 2!\nThis semester we will work on game design using Unity and C#\nUnity "},{"id":18,"href":"/dit11/glossary/argument/","title":"argument","parent":"Glossary","content":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n"},{"id":19,"href":"/dit11/categories/","title":"Categories","parent":"11 DigiTech","content":""},{"id":20,"href":"/dit11/glossary/coordinate/","title":"co-ordinate system","parent":"Glossary","content":"In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.\nEverything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.\n"},{"id":21,"href":"/dit11/glossary/color/","title":"color/colour","parent":"Glossary","content":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nFor most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.\n"},{"id":22,"href":"/dit11/glossary/parameter/","title":"parameter","parent":"Glossary","content":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n"},{"id":23,"href":"/dit11/teaching/siteUrl/","title":"Site URL 🡄🡆","parent":"Teaching materials","content":"Learn about Pygame Zero here:\nhttps://tmcdigitech.github.io/dit8/\n"},{"id":24,"href":"/dit11/tags/","title":"Tags","parent":"11 DigiTech","content":""},{"id":25,"href":"/dit11/glossary/tuple/","title":"tuple","parent":"Glossary","content":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).\n"},{"id":26,"href":"/dit11/troubleshooting/01whybroken/","title":"Why won't my program work?","parent":"Troubleshooting","content":"Here is a checklist of things to look for if something is wrong\u0026hellip;\nSpelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.\n"}]